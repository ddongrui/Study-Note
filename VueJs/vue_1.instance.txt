1.创建一个 Vue 实例
  每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：
    var vm = new Vue({
      // 选项
    })
  Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)


2.数据与方法
(1)当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。
当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值
  // 我们的数据对象
  var data = { a: 1 }
  // 该对象被加入到一个 Vue 实例中
  var vm = new Vue({
    data: data
  })
  // 它们引用相同的对象！
  vm.a === data.a // => true
  // 设置属性也会影响到原始数据
  vm.a = 2
  data.a // => 2
  // ……反之亦然
  data.a = 3
  vm.a // => 3

(2)只有当实例被创建时 data 中存在的属性才是响应式的。也就是说如果你添加一个新的属性不会响应。
  vm.b = 'hi' //对 b 的改动将不会触发任何视图的更新

(3)如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值,比如：
  data: {
    newTodoText: '',
    visitCount: 0,
    hideCompletedTodos: false,
    todos: [],
    error: null
  }
这里唯一的例外是使用 Object.freeze()，这会阻止修改现有的属性，也意味着响应系统无法再追踪变化。

(4)Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：
  var data = { a: 1 }
  var vm = new Vue({
    el: '#example',
    data: data
  })

  vm.$data === data // => true
  vm.$el === document.getElementById('example') // => true

  // $watch 是一个实例方法
  vm.$watch('a', function (newValue, oldValue) {
    // 这个回调将在 `vm.a` 改变后调用
  })


3.实例生命周期钩子
(1)Vue 实例化过程中会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。
  new Vue({
    data: {
      a: 1
    },
    created: function () {
      // `this` 指向 vm 实例
      console.log('a is: ' + this.a)
    }
  })
  // => "a is: 1"

(2)也有一些其它的钩子，在实例生命周期的不同阶段被调用，
如 beforeCreated、created、beforeMounted、mounted、beforeUpdated、updated 和 beforeDestroyed、destroyed。
生命周期钩子的 this 上下文指向调用它的 Vue 实例

(3)不要在选项属性或回调上使用箭头函数，比如 created: () => console.log(this.a) 或
vm.$watch('a', newValue => this.myMethod())。因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例
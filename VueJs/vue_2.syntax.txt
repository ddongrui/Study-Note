模板语法:Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。
1.插值
(1)文本
  数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值,响应更新。
    <span>Message: {{ msg }}</span>
  通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。
    <span v-once>这个将不会改变: {{ msg }}</span>

(2)原始 HTML
  双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令
    <p>Using mustaches: {{ rawHtml }}</p> //将会被替换成为属性值 rawHtml，直接作为 HTML——会忽略解析属性值中的数据绑定
    <p>Using v-html directive: <span v-html="rawHtml"></span></p>

    result:
    Using mustaches: <span style="color: red">This should be red.</span>
    Using v-html directive: This should be red.

    注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。
    注意，站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。

(3)特性
  Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令：
    <div v-bind:id="dynamicId"></div>
    <button v-bind:disabled="isButtonDisabled">Button</button>

(4)使用 JavaScript 表达式
  Vue.js 都提供了完全的 JavaScript 表达式支持。
    {{ number + 1 }}
    {{ ok ? 'YES' : 'NO' }}
    {{ message.split('').reverse().join('') }}
    <div v-bind:id="'list-' + id"></div>

  表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析
    <!-- 这是语句，不是表达式 -->
    {{ var a = 1 }}
    <!-- 流控制也不会生效，请使用三元表达式 -->
    {{ if (ok) { return message } }}


2.指令
指令 (Directives) 是带有 v- 前缀的特殊属性。
指令属性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。
指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。
(1)参数
  一些指令能够接收一个“参数”，在指令名称之后以冒号表示。
    <a v-bind:href="url">...</a> //在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。

  v-on 指令，它用于监听 DOM 事件
  <a v-on:click="doSomething">...</a>

(2)修饰符
  修饰符 (Modifiers) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定
  <form v-on:submit.prevent="onSubmit">...</form> //.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()


3.缩写
vue.js 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写
(1)v-bind 缩写
  <!-- 完整语法 -->
  <a v-bind:href="url">...</a>
  <!-- 缩写 -->
  <a :href="url">...</a>

(2)v-on 缩写
  <!-- 完整语法 -->
  <a v-on:click="doSomething">...</a>
  <!-- 缩写 -->
  <a @click="doSomething">...</a>
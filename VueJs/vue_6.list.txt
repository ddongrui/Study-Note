1.用 v-for 把一个数组对应为一组元素
用 v-for 指令根据一组数组的选项列表进行渲染。

v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。
  <ul id="example-1">
    <li v-for="item in items">
      {{ item.message }}
    </li>
  </ul>
  var example1 = new Vue({
    el: '#example-1',
    data: {
      items: [
        { message: 'Foo' },
        { message: 'Bar' }
      ]
    }
  })

在 v-for 块中，我们拥有对父作用域属性的完全访问权限。v-for 还支持一个可选的第二个参数为当前项的索引。
  <ul id="example-2">
    <li v-for="(item, index) in items">
      {{ parentMessage }} - {{ index }} - {{ item.message }}
    </li>
  </ul>
  var example2 = new Vue({
    el: '#example-2',
    data: {
      parentMessage: 'Parent',
      items: [
        { message: 'Foo' },
        { message: 'Bar' }
      ]
    }
  })

你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：
  <div v-for="item of items"></div>


2.一个对象的 v-for
可以用 v-for 通过一个对象的属性来迭代
  <ul id="v-for-object" class="demo">
    <li v-for="value in object">
      {{ value }}
    </li>
  </ul>
  new Vue({
    el: '#v-for-object',
    data: {
      object: {
        firstName: 'John',
        lastName: 'Doe',
        age: 30
      }
    }
  })

你也可以提供第二个的参数为键名：
  <div v-for="(value, key) in object">
    {{ key }}: {{ value }}
  </div>
  firstName: John
  lastName: Doe
  age: 30

第三个参数为索引：
  <div v-for="(value, key, index) in object">
    {{ index }}. {{ key }}: {{ value }}
  </div>

注意：在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。


3.key
当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。
如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，
而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。

为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。
理想的 key 值是每项都有的且唯一的 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，
但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值 。
  <div v-for="item in items" :key="item.id">
    <!-- 内容 -->
  </div>
建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单

4.数组更新检测
(1)变异方法
  Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：
    push()
    pop()
    shift()
    unshift()
    splice()
    sort()
    reverse()

(2)替换数组
非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。
这些不会改变原始数组，但总是返回一个新数组。
  example1.items = example1.items.filter(function (item) {
    return item.message.match(/Foo/)
  })

(3)注意事项
由于 JavaScript 的限制,Vue 不能检测以下变动的数组
  a.当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
    // Vue.set
    Vue.set(example1.items, indexOfItem, newValue)
    // Array.prototype.splice
    example1.items.splice(indexOfItem, 1, newValue)

  b.当你修改数组的长度时，例如：vm.items.length = newLength

为了解决第二类问题，你可以使用 splice
  example1.items.splice(newLength)


5.对象更改检测注意事项
还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除
  //对于已经创建的实例，Vue 不能动态添加根级别的响应式属性
  var vm = new Vue({
    data: {
      a: 1
    }
  })
  // `vm.a` 现在是响应式的
  vm.b = 2
  // `vm.b` 不是响应式的

可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性
  var vm = new Vue({
    data: {
      userProfile: {
        name: 'Anika'
      }
    }
  })
  Vue.set(vm.userProfile, 'age', 27)
  //你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：
  vm.$set(vm.userProfile, 'age', 27)

有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。
在这种情况下，你应该用两个对象的属性创建一个新的对象
  //error
  Object.assign(vm.userProfile, {
    age: 27,
    favoriteColor: 'Vue Green'
  })
  //ok
  vm.userProfile = Object.assign({}, vm.userProfile, {
    age: 27,
    favoriteColor: 'Vue Green'
  })

6.Other
(1)一段取值范围的 v-for
  //v-for 也可以取整数。在这种情况下，它将重复多次模板。
  <div>
    <span v-for="n in 10">{{ n }} </span>
  </div>

(2)v-for on a <template>
  //类似于 v-if，你也可以利用带有 v-for 的 <template> 渲染多个元素。比如：
  <ul>
    <template v-for="item in items">
      <li>{{ item.msg }}</li>
      <li class="divider"></li>
    </template>
  </ul>

(3)v-for with v-if
  当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。
    <li v-for="todo in todos" v-if="!todo.isComplete">
      {{ todo }}
    </li>

  如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或 <template>)上。
    <ul v-if="todos.length">
      <li v-for="todo in todos">
        {{ todo }}
      </li>
    </ul>
    <p v-else>No todos left!</p>

(4)一个组件的 v-for
  在自定义组件里，你可以像任何普通元素一样用 v-for
    <my-component v-for="item in items" :key="item.id"></my-component>

  2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的
    //任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用 props
    <my-component
      v-for="(item, index) in items"
      v-bind:item="item"
      v-bind:index="index"
      v-bind:key="item.id"
    ></my-component>
